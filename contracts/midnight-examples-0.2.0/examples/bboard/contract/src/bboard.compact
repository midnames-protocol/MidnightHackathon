pragma language_version >= 0.14.0;

import CompactStandardLibrary;

export ledger admin_address: Bytes<32>;

constructor() {
    admin_address = own_public_key().bytes;
}

// We define a passport data packet
export struct PassportDataPacket {
    nationality: Bytes<8>,
    date_of_birth: Uint<64>,
    date_of_emision: Uint<64>,
    expiration_date: Uint<64>,
    country_signature: Bytes<32>,
    midnames_signature: Bytes<32>
}

// Raw user passport data from the private state
witness user_passport_data() : PassportDataPacket;

// Validates that the user is argentine
export circuit validate_nationality() : [] {
    const user_pass = user_passport_data();
    const nationality = user_pass.nationality;
    
    assert nationality == "000000AR" as Bytes<8>
        "User is not argentine";
}

// Validates that the user is older than 18
export circuit validate_adulthood() : [] {
    // Hardcoded for now. TODO: once a datetime function
    // is in place in Compact, use that
    const datetime = 1741058834;

    const user_pass = user_passport_data();
    const birthdate = user_pass.date_of_birth;
    const adulthood_in_nanoseconds = 568036800 as Uint<64>;

    assert (datetime - birthdate) > adulthood_in_nanoseconds
     "User is not old enough";
}

// Validates that a passport is unexpired
export circuit passport_is_unexpired() : [] {
    // Hardcoded for now. TODO: once a datetime function
    // is in place in Compact, use that
    const datetime = 1741058834;

    const user_pass = user_passport_data();
    const expdate = user_pass.expiration_date;
    
    assert expdate > datetime
     "Passport is expired";
}

///export circuit create_user() : [] {
//   // // get caller address
//   const callerAddr : Bytes<32> = own_public_key().bytes;
//
//   // //this function is permissioned, should be called only by us.
//   // assert callerAddr != admin_address
//   //     "User creation is permissioned, may only be done by the app";
//
//   assert user_passport_map.member(callerAddr) != true
//       "User already in the system";
//
//   //we assume in this instance, the data passed by witness is trusted
//   const passportDataHash = disclose(persistent_hash<PassportDataPacket>(user_passport_data()));
//
//   // insert into the address mapping
//   user_passport_map.insert(callerAddr, passportDataHash);
//